Name: Yernazar Karabayev
Group: CS-1802K
Laboratory Work 2
_____________________________

1. Find errors
Ex 1.1
 error reason - attribute "a" is private, so we can not access it directly 
 fix - replace with a call of a getter "getA"
Ex 1.2
 error reason - instance of A wasn't initialized, so we'll get "no method" error. (main function scope)
 fix - initialize new instance of A, and call getter and setter in the context of the instance. (objA.method()) (line 3)
Ex 1.3
 Everything's alright
Ex 1.4
 error reason - can't make a static reference to non-static `a` field (line 6)
 fix - replace `private int a = 222` with `private static int a = 222`. (line 2)

2: Implement Clases from scheme
abstract class Shape {
    protected String color = "red";
    protected boolean filled = true;
    public Shape() { }
    public Shape(String color, boolean filled) {
      this.color = color;
      this.filled = filled;
    }

    public String getColor() {
      return color;
    }

    public void setColor(String color) {
      this.color = color;
    }

    public boolean isFilled() {
      return filled;
    }

    public void setFilled(boolean filled) {
      this.filled = filled;
    }

    public abstract double getArea();
    public abstract double getPerimeter();

    @Override
    public String toString() {
      return "Shape[color="+color+",filled="+filled+"]";
    }
}


class Circle extends Shape {
    public double radius=1.0;
    public Circle() {

    }
    public Circle(double radius) {
      this.radius = radius;
    }
    public Circle(double radius, String color, boolean filled) {
      super(color, filled);
      this.radius = radius;
    }

    public double getRadius() {
      return radius;
    }

    public void setRadius(double radius) {
        this.radius = radius;
    }

    @Override
    public double getArea() {
      return Math.PI * radius * radius;
    }

    @Override
    public double getPerimeter() {
      return 2 * Math.PI * radius;
    }

    @Override
    public String toString() {
      return "Circle["+super.toString()+", radius="+radius+"]";
    }
}

class Rectangle extends Shape {
    protected double width = 1.0;
    protected double length = 1.0;
    public Rectangle () { }

    public Rectangle (double width, double length,String color,boolean filled) {
      super(color, filled);
      this.width = width;
      this.length = length;
    }

    public Rectangle (double width, double length) {
      this.width = width;
      this.length = length;
    }

    public double getWidth() {
      return width;
    }

    public void setWidth(double width) {
      this.width = width;
    }

    public double getLength() {
      return length;
    }

    public void setLength(double length) {
      this.length = length;
    }

    @Override
    public double getArea() {
      return width*length;
    }

    @Override
    public double getPerimeter() {
      return (width + length)*2;
    }

    @Override
    public String toString() {
      return "Rectangle["+super.toString()+",width="+width+",length="+length+"]";
    }

}

class Square extends Rectangle{
    public Square() { }

    public Square(double side) {
      super.length = side;
      super.width = side;
    }

    public Square(double side, String color, boolean filled) {
      super.color = color;
      super.filled = filled;
      super.length = side;
    }

    public double getSide() {
      return super.length;
    }

    public void setSide(double length) {
      super.length = length;
      super.width = length;
    }

    @Override
    public void setLength(double length) {
      setSide(length);
    }

    @Override
    public void setWidth(double length) {
      setSide(length);
    }

    @Override
    public String toString() {
      return "Square["+super.toString()+"]";
    }
}
